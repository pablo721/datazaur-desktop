# -*- coding: utf-8 -*-

# Form implementation generated from reading views file 'monitor.views'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets
from forex_python.converter import CurrencyRates
import pandas as pd
from pandasmodel import PandasModel
from requests import Session
from requests.exceptions import ConnectionError, Timeout, TooManyRedirects
import json
import datetime
from my_tables import MyTable


class Monitor(QtWidgets.QWidget):
    def __init__(self, parent, zaur):
        super().__init__(parent)

        self.zaur = zaur
        self.tabs = QtWidgets.QTabWidget(self)
        self.tabs.setGeometry(QtCore.QRect(0, 0, 901, 531))
        self.tabs.setStyleSheet("font: 75 12pt \"FreeMono Bold\";")
        self.tabs.setObjectName("tabs")
        self.crypto = QtWidgets.QWidget()
        self.crypto.setObjectName("crypto")
        self.cryptotabs = QtWidgets.QTabWidget(self.crypto)
        self.cryptotabs.setGeometry(QtCore.QRect(0, 0, 901, 501))
        self.cryptotabs.setStyleSheet("font: 75 12pt \"FreeMono Bold\";")
        self.cryptotabs.setObjectName("cryptotabs")
        self.coinmarket = CoinMarket(self.tabs)
        self.coinmarket.setObjectName("coinmarket")
        self.cryptotabs.addTab(self.coinmarket, "")
        self.watchlist = QtWidgets.QWidget()
        self.watchlist.setObjectName("watchlist")
        self.cryptotabs.addTab(self.watchlist, "")
        self.portfolio = QtWidgets.QWidget()
        self.portfolio.setObjectName("portfolio")
        self.groupBox_15 = QtWidgets.QGroupBox(self.portfolio)
        self.groupBox_15.setGeometry(QtCore.QRect(0, -10, 901, 511))
        self.groupBox_15.setStyleSheet("font: 75 10.5pt \"FreeMono Bold\";")
        self.groupBox_15.setTitle("")
        self.groupBox_15.setObjectName("groupBox_15")
        self.label_57 = QtWidgets.QLabel(self.groupBox_15)
        self.label_57.setGeometry(QtCore.QRect(0, 30, 191, 31))
        self.label_57.setAlignment(QtCore.Qt.AlignCenter)
        self.label_57.setObjectName("label_57")
        self.label_58 = QtWidgets.QLabel(self.groupBox_15)
        self.label_58.setGeometry(QtCore.QRect(130, 70, 61, 31))
        self.label_58.setObjectName("label_58")
        self.label_59 = QtWidgets.QLabel(self.groupBox_15)
        self.label_59.setGeometry(QtCore.QRect(0, 120, 131, 31))
        self.label_59.setAlignment(QtCore.Qt.AlignCenter)
        self.label_59.setObjectName("label_59")
        self.label_64 = QtWidgets.QLabel(self.groupBox_15)
        self.label_64.setGeometry(QtCore.QRect(20, 70, 101, 31))
        self.label_64.setObjectName("label_64")
        self.tabWidget_14 = QtWidgets.QTabWidget(self.groupBox_15)
        self.tabWidget_14.setGeometry(QtCore.QRect(450, 20, 441, 481))
        self.tabWidget_14.setObjectName("tabWidget_14")
        self.tab_33 = QtWidgets.QWidget()
        self.tab_33.setObjectName("tab_33")
        self.tableView_15 = QtWidgets.QTableView(self.tab_33)
        self.tableView_15.setGeometry(QtCore.QRect(0, 0, 431, 451))
        self.tableView_15.setObjectName("tableView_15")
        self.tabWidget_14.addTab(self.tab_33, "")
        self.groupBox_16 = QtWidgets.QGroupBox(self.groupBox_15)
        self.groupBox_16.setGeometry(QtCore.QRect(10, 360, 431, 141))
        self.groupBox_16.setObjectName("groupBox_16")
        self.comboBox_30 = QtWidgets.QComboBox(self.groupBox_16)
        self.comboBox_30.setGeometry(QtCore.QRect(10, 30, 141, 41))
        self.comboBox_30.setObjectName("comboBox_30")
        self.lineEdit_37 = QtWidgets.QLineEdit(self.groupBox_16)
        self.lineEdit_37.setGeometry(QtCore.QRect(160, 30, 261, 41))
        self.lineEdit_37.setObjectName("lineEdit_37")
        self.pushButton_47 = QtWidgets.QPushButton(self.groupBox_16)
        self.pushButton_47.setGeometry(QtCore.QRect(10, 80, 261, 51))
        self.pushButton_47.setObjectName("pushButton_47")
        self.pushButton_48 = QtWidgets.QPushButton(self.groupBox_16)
        self.pushButton_48.setGeometry(QtCore.QRect(280, 80, 141, 51))
        self.pushButton_48.setObjectName("pushButton_48")
        self.comboBox_34 = QtWidgets.QComboBox(self.groupBox_15)
        self.comboBox_34.setGeometry(QtCore.QRect(10, 160, 111, 31))
        self.comboBox_34.setEditable(True)
        self.comboBox_34.setObjectName("comboBox_34")
        self.comboBox_34.addItem("")
        self.comboBox_34.addItem("")
        self.comboBox_34.addItem("")
        self.comboBox_34.addItem("")
        self.comboBox_34.addItem("")
        self.comboBox_34.addItem("")
        self.comboBox_34.addItem("")
        self.comboBox_34.addItem("")
        self.comboBox_34.addItem("")
        self.comboBox_34.addItem("")
        self.comboBox_34.addItem("")
        self.comboBox_34.addItem("")
        self.comboBox_34.addItem("")
        self.comboBox_34.addItem("")
        self.groupBox_17 = QtWidgets.QGroupBox(self.groupBox_15)
        self.groupBox_17.setGeometry(QtCore.QRect(300, 30, 141, 341))
        self.groupBox_17.setObjectName("groupBox_17")
        self.pushButton_59 = QtWidgets.QPushButton(self.groupBox_17)
        self.pushButton_59.setGeometry(QtCore.QRect(10, 120, 121, 51))
        self.pushButton_59.setObjectName("pushButton_59")
        self.pushButton_49 = QtWidgets.QPushButton(self.groupBox_17)
        self.pushButton_49.setGeometry(QtCore.QRect(10, 40, 121, 51))
        self.pushButton_49.setObjectName("pushButton_49")
        self.pushButton_60 = QtWidgets.QPushButton(self.groupBox_17)
        self.pushButton_60.setGeometry(QtCore.QRect(10, 280, 121, 51))
        self.pushButton_60.setObjectName("pushButton_60")
        self.pushButton_61 = QtWidgets.QPushButton(self.groupBox_17)
        self.pushButton_61.setGeometry(QtCore.QRect(10, 200, 121, 51))
        self.pushButton_61.setObjectName("pushButton_61")
        self.cryptotabs.addTab(self.portfolio, "")
        self.stats = QtWidgets.QWidget()
        self.stats.setObjectName("stats")
        self.tableView_16 = QtWidgets.QTableView(self.stats)
        self.tableView_16.setGeometry(QtCore.QRect(0, 50, 901, 452))
        self.tableView_16.setObjectName("tableView_16")
        self.stattabs = QtWidgets.QTabWidget(self.stats)
        self.stattabs.setGeometry(QtCore.QRect(0, 0, 901, 501))
        self.stattabs.setObjectName("stattabs")
        self.tab_35 = QtWidgets.QWidget()
        self.tab_35.setObjectName("tab_35")
        self.tableView_17 = QtWidgets.QTableView(self.tab_35)
        self.tableView_17.setGeometry(QtCore.QRect(0, 50, 891, 421))
        self.tableView_17.setObjectName("tableView_17")
        self.frame_20 = QtWidgets.QFrame(self.tab_35)
        self.frame_20.setGeometry(QtCore.QRect(0, 0, 891, 47))
        self.frame_20.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_20.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_20.setObjectName("frame_20")
        self.comboBox_37 = QtWidgets.QComboBox(self.frame_20)
        self.comboBox_37.setGeometry(QtCore.QRect(450, 8, 111, 31))
        self.comboBox_37.setEditable(False)
        self.comboBox_37.setObjectName("comboBox_37")
        self.pushButton_62 = QtWidgets.QPushButton(self.frame_20)
        self.pushButton_62.setGeometry(QtCore.QRect(570, 8, 81, 31))
        self.pushButton_62.setObjectName("pushButton_62")
        self.checkBox_4 = QtWidgets.QCheckBox(self.frame_20)
        self.checkBox_4.setGeometry(QtCore.QRect(240, 8, 111, 31))
        self.checkBox_4.setChecked(True)
        self.checkBox_4.setObjectName("checkBox_4")
        self.comboBox_38 = QtWidgets.QComboBox(self.frame_20)
        self.comboBox_38.setGeometry(QtCore.QRect(110, 8, 71, 31))
        self.comboBox_38.setObjectName("comboBox_38")
        self.comboBox_38.addItem("")
        self.comboBox_38.addItem("")
        self.comboBox_38.addItem("")
        self.comboBox_38.addItem("")
        self.comboBox_38.addItem("")
        self.comboBox_38.addItem("")
        self.comboBox_38.addItem("")
        self.comboBox_38.addItem("")
        self.label_49 = QtWidgets.QLabel(self.frame_20)
        self.label_49.setGeometry(QtCore.QRect(10, 8, 91, 31))
        self.label_49.setObjectName("label_49")
        self.pushButton_63 = QtWidgets.QPushButton(self.frame_20)
        self.pushButton_63.setGeometry(QtCore.QRect(780, 8, 101, 31))
        self.pushButton_63.setObjectName("pushButton_63")
        self.stattabs.addTab(self.tab_35, "")
        self.tab_36 = QtWidgets.QWidget()
        self.tab_36.setObjectName("tab_36")
        self.stattabs.addTab(self.tab_36, "")
        self.cryptotabs.addTab(self.stats, "")
        self.tabs.addTab(self.crypto, "")
        self.fx = FXWidget(self.tabs)
        self.fx.setObjectName("fx")
        self.tabs.addTab(self.fx, "")
        self.tab_10 = QtWidgets.QWidget()
        self.tab_10.setObjectName("tab_10")
        self.tabs.addTab(self.tab_10, "")
        self.tab_11 = QtWidgets.QWidget()
        self.tab_11.setObjectName("tab_11")
        self.tabs.addTab(self.tab_11, "")
        self.tab_22 = QtWidgets.QWidget()
        self.tab_22.setObjectName("tab_22")
        self.tabs.addTab(self.tab_22, "")
        self.tab_37 = QtWidgets.QWidget()
        self.tab_37.setObjectName("tab_37")
        self.tabs.addTab(self.tab_37, "")

        self.retranslateUi()
        self.tabs.setCurrentIndex(0)
        self.cryptotabs.setCurrentIndex(0)
        self.tabWidget_14.setCurrentIndex(0)
        self.stattabs.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate

        self.cryptotabs.setTabText(self.cryptotabs.indexOf(self.coinmarket), _translate("Form", "overview"))
        self.cryptotabs.setTabText(self.cryptotabs.indexOf(self.watchlist), _translate("Form", "watchlist"))
        self.label_57.setText(_translate("Form", "total value of holdings:"))
        self.label_58.setText(_translate("Form", " USDT"))
        self.label_59.setText(_translate("Form", "base currency:"))
        self.label_64.setText(_translate("Form", "#"))
        self.tabWidget_14.setTabText(self.tabWidget_14.indexOf(self.tab_33), _translate("Form", "portfolio 1"))
        self.groupBox_16.setTitle(_translate("Form", "   asset:                       amount:"))
        self.pushButton_47.setText(_translate("Form", "add"))
        self.pushButton_48.setText(_translate("Form", "remove"))
        self.comboBox_34.setItemText(0, _translate("Form", "USDT"))
        self.comboBox_34.setItemText(1, _translate("Form", "USDC"))
        self.comboBox_34.setItemText(2, _translate("Form", "USD"))
        self.comboBox_34.setItemText(3, _translate("Form", "EUR"))
        self.comboBox_34.setItemText(4, _translate("Form", "PLN"))
        self.comboBox_34.setItemText(5, _translate("Form", "GBP"))
        self.comboBox_34.setItemText(6, _translate("Form", "CHF"))
        self.comboBox_34.setItemText(7, _translate("Form", "JPY"))
        self.comboBox_34.setItemText(8, _translate("Form", "CNY"))
        self.comboBox_34.setItemText(9, _translate("Form", "BTC"))
        self.comboBox_34.setItemText(10, _translate("Form", "ETH"))
        self.comboBox_34.setItemText(11, _translate("Form", "LTC"))
        self.comboBox_34.setItemText(12, _translate("Form", "XRP"))
        self.comboBox_34.setItemText(13, _translate("Form", "XMR"))
        self.groupBox_17.setTitle(_translate("Form", "portfolio tools"))
        self.pushButton_59.setText(_translate("Form", "import assets"))
        self.pushButton_49.setText(_translate("Form", "new portfolio"))
        self.pushButton_60.setText(_translate("Form", "delete portfolio"))
        self.pushButton_61.setText(_translate("Form", "rename"))
        self.cryptotabs.setTabText(self.cryptotabs.indexOf(self.portfolio), _translate("Form", "portfolio"))
        self.pushButton_62.setText(_translate("Form", "add"))
        self.checkBox_4.setText(_translate("Form", "detrended"))
        self.comboBox_38.setItemText(0, _translate("Form", "24h"))
        self.comboBox_38.setItemText(1, _translate("Form", "7d"))
        self.comboBox_38.setItemText(2, _translate("Form", "1M"))
        self.comboBox_38.setItemText(3, _translate("Form", "3M"))
        self.comboBox_38.setItemText(4, _translate("Form", "6M"))
        self.comboBox_38.setItemText(5, _translate("Form", "1y"))
        self.comboBox_38.setItemText(6, _translate("Form", "2y"))
        self.comboBox_38.setItemText(7, _translate("Form", "5y"))
        self.label_49.setText(_translate("Form", "timeframe"))
        self.pushButton_63.setText(_translate("Form", "remove"))
        self.stattabs.setTabText(self.stattabs.indexOf(self.tab_35), _translate("Form", "correlations"))
        self.stattabs.setTabText(self.stattabs.indexOf(self.tab_36), _translate("Form", "dominance"))
        self.cryptotabs.setTabText(self.cryptotabs.indexOf(self.stats), _translate("Form", "statistics"))
        self.tabs.setTabText(self.tabs.indexOf(self.crypto), _translate("Form", "crypto"))
        self.tabs.setTabText(self.tabs.indexOf(self.fx), _translate("Form", "FX"))
        self.tabs.setTabText(self.tabs.indexOf(self.tab_10), _translate("Form", "indices"))
        self.tabs.setTabText(self.tabs.indexOf(self.tab_11), _translate("Form", "equities"))
        self.tabs.setTabText(self.tabs.indexOf(self.tab_22), _translate("Form", "bonds"))
        self.tabs.setTabText(self.tabs.indexOf(self.tab_37), _translate("Form", "macro"))








# crypto market overview from coinmarketcap.com
class CoinMarket(QtWidgets.QWidget):
    def __init__(self, parent):
        super().__init__(parent)

        self.setGeometry(QtCore.QRect(0, 0, 895, 535))
        self.tabs = QtWidgets.QTabWidget(self)
        self.tabs.setGeometry(QtCore.QRect(0, 0, 895, 510))
        self.prices_tab = QtWidgets.QWidget(self.tabs)
        self.prices_tab.setGeometry(QtCore.QRect(0, 0, 895, 470))
        self.info_tab = QtWidgets.QWidget(self.tabs)
        self.info_tab.setGeometry(QtCore.QRect(0, 0, 895, 470))
        self.tabs.addTab(self.prices_tab, 'markets')
        self.tabs.addTab(self.info_tab, 'info')

        self.dfs = dict()
        self.parameters = {'start': '1', 'limit': '100', 'convert': 'USD'}
        self.headers = {'Accepts': 'application/json', 'X-CMC_PRO_API_KEY': 'a7cf8011-716c-4d9d-84fe-f1de1ed7fe37'}
        self.listing_url = 'https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest'

        self.groupBox = QtWidgets.QGroupBox(self.prices_tab)
        self.groupBox.setGeometry(QtCore.QRect(0, 0, 895, 470))

        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(5, 10, 64, 30))
        self.label.setText('search')
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit.setGeometry(QtCore.QRect(70, 10, 140, 30))
        self.button = QtWidgets.QPushButton(self.groupBox)
        self.button.setGeometry(QtCore.QRect(220, 10, 80, 30))
        self.button.setText('watch')
        self.button2 = QtWidgets.QPushButton(self.groupBox)
        self.button2.setGeometry(QtCore.QRect(600, 10, 100, 30))
        self.button2.setText('fetch data')
        self.label2 = QtWidgets.QLabel(self.groupBox)
        self.label2.setGeometry(QtCore.QRect(750, 10, 41, 30))
        self.label2.setText('limit')
        self.combo = QtWidgets.QComboBox(self.groupBox)
        self.combo.setGeometry(QtCore.QRect(800, 10, 81, 30))
        self.combo.addItems('100 200 300 400 500'.split())
        self.combo.setEditable(True)

        self.prices_table = MyTable(self.groupBox)
        self.prices_table.setGeometry(QtCore.QRect(0, 50, 887, 385))



        self.groupBox2 = QtWidgets.QGroupBox(self.info_tab)
        self.groupBox2.setGeometry(QtCore.QRect(0, 0, 895, 470))
        #self.groupBox2.setTitle('Market overview powered by Coinmarketcap.com')
        self.label3 = QtWidgets.QLabel(self.groupBox2)
        self.label3.setGeometry(QtCore.QRect(5, 10, 64, 30))
        self.label3.setText('search')
        self.lineEdit2 = QtWidgets.QLineEdit(self.groupBox2)
        self.lineEdit2.setGeometry(QtCore.QRect(70, 10, 140, 30))
        self.button3 = QtWidgets.QPushButton(self.groupBox2)
        self.button3.setGeometry(QtCore.QRect(220, 10, 80, 30))
        self.button3.setText('watch')
        self.button4 = QtWidgets.QPushButton(self.groupBox2)
        self.button4.setGeometry(QtCore.QRect(600, 10, 100, 30))
        self.button4.setText('fetch data')
        self.label4 = QtWidgets.QLabel(self.groupBox2)
        self.label4.setGeometry(QtCore.QRect(750, 10, 41, 30))
        self.label4.setText('limit')
        self.combo2 = QtWidgets.QComboBox(self.groupBox2)
        self.combo2.setGeometry(QtCore.QRect(800, 10, 81, 30))
        self.combo2.addItems('100 200 300 400 500'.split())
        self.combo2.setEditable(True)

        self.info_table = MyTable(self.groupBox2)
        self.info_table.setGeometry(QtCore.QRect(0, 50, 887, 385))




        self.lineEdit.textChanged.connect(self.search)
        self.button2.clicked.connect(self.fetch_data)


    def search(self):
        pass

    # wrapper for get data method
    def fetch_data(self):
        dfs = self.get_top_100()
        self.dfs['pricing'] = dfs[0]
        self.dfs['info'] = dfs[1]
        self.coin_dict = dfs[1][['name', 'symbol']]
        self.coin_dict.set_index('symbol', inplace=True)
        self.prices_table.add_data(dfs[0])
        self.info_table.add_data(dfs[1])


    # gets data
    def get_data(self):
        session = Session()
        session.headers.update(self.headers)
        try:
            response = session.get(self.listing_url, params=self.parameters)
            data = json.loads(response.text)
            return pd.DataFrame(data['data'])
        except (ConnectionError, Timeout, TooManyRedirects) as e:
            print(e)

    # gets top 100 cryptocurrencies by market cap
    def get_top_100(self):
        data = self.get_data()
        d2 = pd.DataFrame(data)
        d2.set_index('cmc_rank', inplace=True)
        d2['USD4'] = list(map(lambda x: x['USD'], d2['quote']))
        d1 = d2.loc[:, 'name symbol num_market_pairs date_added tags max_supply circulating_supply total_supply platform'.split()]
        d1.loc[:, 'date_added'] = d1.loc[:, 'date_added'].map(lambda x: x[:10])
        d1.loc[:, ['max_supply', 'circulating_supply', 'total_supply']] = d1.loc[:, ['max_supply', 'circulating_supply', 'total_supply']].dropna().astype('int64')
        columns = list(d2.iloc[0]['USD4'].keys())
        columns.insert(0, 'name')
        d3 = pd.DataFrame(index=d2.index, columns=columns)
        for i in d3.index:
            d3.loc[i] = d2.loc[i]['USD4']

        d3[['name']] = d2[['name']]
        d3.columns = ['x', 'name', 'price', '24h vol', '1h Δ', '24h Δ', '7d Δ', 'market cap', 'updated']
        d3[['price', '1h Δ', '24h Δ', '7d Δ']] = d3[['price', '1h Δ', '24h Δ', '7d Δ']].astype('float64')
        d3[['24h vol', 'market cap']] = d3[['24h vol', 'market cap']].astype('int64')
        d3['price'] = d3['price'].round(5)
        d3[['1h Δ', '24h Δ', '7d Δ']] = d3[['1h Δ', '24h Δ', '7d Δ']].round(2)
        for col in ['1h Δ', '24h Δ', '7d Δ']:
            d3[col] = d3[col].apply(lambda x: f'{x}%')
        d3['updated'] = d3['updated'].map(lambda x: x[:16])

        return d3, d1


    # rounds data
    @staticmethod
    def round_data(df, columns, decimals):
        for col in columns:
            df.loc[:, col] = df.loc[:, col].round(decimals)
        return df

    # sets column width
    def set_col_width(self, table):
        table.setColumnWidth(0, 100)
        table.setColumnWidth(1, 120)
        table.setColumnWidth(2, 120)
        table.setColumnWidth(3, 70)
        table.setColumnWidth(4, 70)
        table.setColumnWidth(5, 70)
        table.setColumnWidth(6, 140)
        table.setColumnWidth(7, 140)





class WatchList(QtWidgets.QWidget):
    def __init__(self, parent):
        super().__init__(parent)


        self.setGeometry(QtCore.QRect(0, 0, 895, 502))
        self.frame = QtWidgets.QFrame(self)
        self.frame.setGeometry(QtCore.QRect(0, 0, 895, 502))
        self.watchlist = pd.DataFrame(columns=['ticker', 'exchange', 'price', '24h Δ', '24h %Δ', '24h vol', '24h high', '24h low'])

        self.table = MyTable(self.frame)
        self.table.setGeometry(QtCore.QRect(0, 50, 895, 452))



    def add_asset(self, ticker, exchange):
        #self.watchlist.loc[ticker] =
        self.setModel(model)


    @staticmethod
    def round_data(df, columns, decimals):
        for col in columns:
            df.loc[:, col] = df.loc[:, col].round(decimals)
        return df





class FXWidget(QtWidgets.QWidget):
    def __init__(self, parent):
        super().__init__(parent)
        today = datetime.datetime.today()
        self.sorted_currencies = 'USD EUR GBP CHF PLN JPY CNY RUB KRW SGD HKD INR IDR PHP MYR THB CAD AUD NZD NOK SEK' \
                                 ' DKK CZK BGN HUF HRK RON ISK TRY ILS BRL MXN ZAR '.split()
        self.setGeometry(QtCore.QRect(0, 0, 901, 502))
        self.frame = QtWidgets.QFrame(self)
        self.frame.setGeometry(QtCore.QRect(0, 0, 901, 502))
        self.groupBox = QtWidgets.QGroupBox(self.frame)
        self.groupBox.setGeometry(QtCore.QRect(0, 0, 901, 60))
        self.groupBox.setTitle('converter')

        self.lineEdit1 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit1.setGeometry(QtCore.QRect(2, 27, 80, 27))
        self.lineEdit1.setStyleSheet("background-color: rgb(12, 52, 82);\n"
                           "alternate-background-color: rgb(9, 21, 32); \n"
                           "color: rgb(255, 255, 255); \n"
                           "font: 50  10pt \"FreeMono Bold\";")
        self.comboBox = QtWidgets.QComboBox(self.groupBox)
        self.comboBox.setGeometry(QtCore.QRect(88, 27, 75, 27))
        self.comboBox.addItems(self.sorted_currencies)

        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(174, 27, 22, 27))
        self.label.setText('to:')

        self.comboBox1 = QtWidgets.QComboBox(self.groupBox)
        self.comboBox1.setGeometry(QtCore.QRect(204, 27, 75, 27))
        self.comboBox1.addItems(self.sorted_currencies)

        self.label1 = QtWidgets.QLabel(self.groupBox)
        self.label1.setGeometry(QtCore.QRect(292, 27, 12, 27))
        self.label1.setText('=')

        self.label3 = QtWidgets.QLabel(self.groupBox)
        self.label3.setGeometry(QtCore.QRect(318, 27, 78, 27))


        self.label2 = QtWidgets.QLabel(self.groupBox)
        self.label2.setGeometry(QtCore.QRect(406, 27, 56, 27))
        self.label2.setText('search')
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit.setGeometry(QtCore.QRect(470, 27, 90, 27))
        self.lineEdit.setStyleSheet("background-color: rgb(12, 52, 82);\n"
                           "alternate-background-color: rgb(9, 21, 32); \n"
                           "color: rgb(255, 255, 255); \n"
                           "font: 50  10pt \"FreeMono Bold\";")

        self.checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.checkbox.setGeometry(QtCore.QRect(570, 27, 140, 27))
        self.checkbox.setText('historical rates')
        self.checkbox.setChecked(False)
        self.dateedit = QtWidgets.QDateTimeEdit(self.groupBox)
        self.dateedit.setGeometry(QtCore.QRect(720, 27, 175, 27))
        self.dateedit.setDate(today)
        self.dateedit.setCalendarPopup(True)


        self.table = MyTable(self.frame)
        self.table.setGeometry(QtCore.QRect(0, 65, 896, 430))

        self.base_currency = 'USD'
        self.currencies = CurrencyRates()
        self.rates = pd.Series(self.currencies.get_rates(self.base_currency))
        self.get_currency_matrix(self.rates)


        self.checkbox.toggled.connect(self.enable_dateedit)
        self.checkbox.released.connect(self.hist_prices_off)
        self.dateedit.dateChanged.connect(lambda: self.get_currency_matrix(self.get_historical_rates()))
        self.lineEdit.textChanged.connect(self.search)
        self.lineEdit1.textChanged.connect(self.convert)
        self.comboBox.currentTextChanged.connect(self.convert)
        self.comboBox1.currentTextChanged.connect(self.convert)

    # enables datetimeedit widget (for historical rates)
    def enable_dateedit(self):

        self.dateedit.setEnabled(True)

    # disables historical prices
    def hist_prices_off(self):
        self.get_currency_matrix(self.rates)

    # converts currencies
    def convert(self):
        #rate = self.currencies.get_rate(self.comboBox.currentText(), self.comboBox1.currentText())
        if float(self.lineEdit1.text()):
            rate = self.matrix.loc[self.comboBox.currentText(), self.comboBox1.currentText()]
            amount = float(self.lineEdit1.text())
            cash = str(amount * rate)
            self.label3.setText(cash)
        else:
            pass

    # gets FX exchange rates
    def get_rates2(self):
        return pd.Series(self.currencies.get_rates(self.base_currency))

    # gets historical rates
    def get_historical_rates(self):
        date = self.dateedit.dateTime().toPyDateTime()
        return pd.Series(self.currencies.get_rates(self.base_currency, date))

    # filters the table
    def search(self):
        text = self.lineEdit.text()
        filtered_df = self.matrix.loc[filter(lambda x: text.upper() in x, self.matrix.index)]
        model = PandasModel(filtered_df)
        self.table.setModel(model)

    # returns matrix of FX exchange rates
    def get_currency_matrix(self, series):
        matrix = pd.DataFrame(index=self.sorted_currencies, columns=self.sorted_currencies)
        s1 = series.copy()
        matrix.loc[self.base_currency] = s1
        matrix.loc[:, self.base_currency] = s1
        self.matrix = matrix.apply(lambda x: matrix.loc[self.base_currency] / x.loc[self.base_currency])
        self.matrix = self.matrix.transpose(copy=True)
        self.matrix = self.round_data(self.matrix.copy(), 4)

        model = PandasModel(self.matrix)
        self.table.setModel(model)


    # rounds data
    @staticmethod
    def round_data(df, decimals):
        for col in df.columns:
            df.loc[col] = df.loc[col].astype('float64').round(decimals)
        return df.copy()






